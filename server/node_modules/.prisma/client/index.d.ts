
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ShiftRecord
 * 
 */
export type ShiftRecord = $Result.DefaultSelection<Prisma.$ShiftRecordPayload>
/**
 * Model LocationPerimeter
 * 
 */
export type LocationPerimeter = $Result.DefaultSelection<Prisma.$LocationPerimeterPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  MANAGER: 'MANAGER',
  CAREWORKER: 'CAREWORKER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ShiftStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED'
};

export type ShiftStatus = (typeof ShiftStatus)[keyof typeof ShiftStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ShiftStatus = $Enums.ShiftStatus

export const ShiftStatus: typeof $Enums.ShiftStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.shiftRecord`: Exposes CRUD operations for the **ShiftRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShiftRecords
    * const shiftRecords = await prisma.shiftRecord.findMany()
    * ```
    */
  get shiftRecord(): Prisma.ShiftRecordDelegate<ExtArgs>;

  /**
   * `prisma.locationPerimeter`: Exposes CRUD operations for the **LocationPerimeter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationPerimeters
    * const locationPerimeters = await prisma.locationPerimeter.findMany()
    * ```
    */
  get locationPerimeter(): Prisma.LocationPerimeterDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ShiftRecord: 'ShiftRecord',
    LocationPerimeter: 'LocationPerimeter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "shiftRecord" | "locationPerimeter"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ShiftRecord: {
        payload: Prisma.$ShiftRecordPayload<ExtArgs>
        fields: Prisma.ShiftRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>
          }
          findFirst: {
            args: Prisma.ShiftRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>
          }
          findMany: {
            args: Prisma.ShiftRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>[]
          }
          create: {
            args: Prisma.ShiftRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>
          }
          createMany: {
            args: Prisma.ShiftRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShiftRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>[]
          }
          delete: {
            args: Prisma.ShiftRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>
          }
          update: {
            args: Prisma.ShiftRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>
          }
          deleteMany: {
            args: Prisma.ShiftRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShiftRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftRecordPayload>
          }
          aggregate: {
            args: Prisma.ShiftRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShiftRecord>
          }
          groupBy: {
            args: Prisma.ShiftRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftRecordCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftRecordCountAggregateOutputType> | number
          }
        }
      }
      LocationPerimeter: {
        payload: Prisma.$LocationPerimeterPayload<ExtArgs>
        fields: Prisma.LocationPerimeterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationPerimeterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationPerimeterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>
          }
          findFirst: {
            args: Prisma.LocationPerimeterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationPerimeterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>
          }
          findMany: {
            args: Prisma.LocationPerimeterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>[]
          }
          create: {
            args: Prisma.LocationPerimeterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>
          }
          createMany: {
            args: Prisma.LocationPerimeterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationPerimeterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>[]
          }
          delete: {
            args: Prisma.LocationPerimeterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>
          }
          update: {
            args: Prisma.LocationPerimeterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>
          }
          deleteMany: {
            args: Prisma.LocationPerimeterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationPerimeterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationPerimeterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPerimeterPayload>
          }
          aggregate: {
            args: Prisma.LocationPerimeterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationPerimeter>
          }
          groupBy: {
            args: Prisma.LocationPerimeterGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationPerimeterGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationPerimeterCountArgs<ExtArgs>
            result: $Utils.Optional<LocationPerimeterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    shifts: number
    createdPerimeters: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shifts?: boolean | UserCountOutputTypeCountShiftsArgs
    createdPerimeters?: boolean | UserCountOutputTypeCountCreatedPerimetersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPerimetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationPerimeterWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.Role | null
    auth0Id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.Role | null
    auth0Id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    role: number
    auth0Id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    auth0Id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    auth0Id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    auth0Id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    role: $Enums.Role
    auth0Id: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    auth0Id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shifts?: boolean | User$shiftsArgs<ExtArgs>
    createdPerimeters?: boolean | User$createdPerimetersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    auth0Id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    auth0Id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shifts?: boolean | User$shiftsArgs<ExtArgs>
    createdPerimeters?: boolean | User$createdPerimetersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      shifts: Prisma.$ShiftRecordPayload<ExtArgs>[]
      createdPerimeters: Prisma.$LocationPerimeterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      role: $Enums.Role
      auth0Id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shifts<T extends User$shiftsArgs<ExtArgs> = {}>(args?: Subset<T, User$shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "findMany"> | Null>
    createdPerimeters<T extends User$createdPerimetersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPerimetersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly auth0Id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.shifts
   */
  export type User$shiftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    where?: ShiftRecordWhereInput
    orderBy?: ShiftRecordOrderByWithRelationInput | ShiftRecordOrderByWithRelationInput[]
    cursor?: ShiftRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftRecordScalarFieldEnum | ShiftRecordScalarFieldEnum[]
  }

  /**
   * User.createdPerimeters
   */
  export type User$createdPerimetersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    where?: LocationPerimeterWhereInput
    orderBy?: LocationPerimeterOrderByWithRelationInput | LocationPerimeterOrderByWithRelationInput[]
    cursor?: LocationPerimeterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationPerimeterScalarFieldEnum | LocationPerimeterScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ShiftRecord
   */

  export type AggregateShiftRecord = {
    _count: ShiftRecordCountAggregateOutputType | null
    _avg: ShiftRecordAvgAggregateOutputType | null
    _sum: ShiftRecordSumAggregateOutputType | null
    _min: ShiftRecordMinAggregateOutputType | null
    _max: ShiftRecordMaxAggregateOutputType | null
  }

  export type ShiftRecordAvgAggregateOutputType = {
    clockInLatitude: number | null
    clockInLongitude: number | null
    clockOutLatitude: number | null
    clockOutLongitude: number | null
    durationMinutes: number | null
  }

  export type ShiftRecordSumAggregateOutputType = {
    clockInLatitude: number | null
    clockInLongitude: number | null
    clockOutLatitude: number | null
    clockOutLongitude: number | null
    durationMinutes: number | null
  }

  export type ShiftRecordMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clockInTime: Date | null
    clockInLatitude: number | null
    clockInLongitude: number | null
    clockInNote: string | null
    clockOutTime: Date | null
    clockOutLatitude: number | null
    clockOutLongitude: number | null
    clockOutNote: string | null
    durationMinutes: number | null
    status: $Enums.ShiftStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShiftRecordMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clockInTime: Date | null
    clockInLatitude: number | null
    clockInLongitude: number | null
    clockInNote: string | null
    clockOutTime: Date | null
    clockOutLatitude: number | null
    clockOutLongitude: number | null
    clockOutNote: string | null
    durationMinutes: number | null
    status: $Enums.ShiftStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShiftRecordCountAggregateOutputType = {
    id: number
    userId: number
    clockInTime: number
    clockInLatitude: number
    clockInLongitude: number
    clockInNote: number
    clockOutTime: number
    clockOutLatitude: number
    clockOutLongitude: number
    clockOutNote: number
    durationMinutes: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShiftRecordAvgAggregateInputType = {
    clockInLatitude?: true
    clockInLongitude?: true
    clockOutLatitude?: true
    clockOutLongitude?: true
    durationMinutes?: true
  }

  export type ShiftRecordSumAggregateInputType = {
    clockInLatitude?: true
    clockInLongitude?: true
    clockOutLatitude?: true
    clockOutLongitude?: true
    durationMinutes?: true
  }

  export type ShiftRecordMinAggregateInputType = {
    id?: true
    userId?: true
    clockInTime?: true
    clockInLatitude?: true
    clockInLongitude?: true
    clockInNote?: true
    clockOutTime?: true
    clockOutLatitude?: true
    clockOutLongitude?: true
    clockOutNote?: true
    durationMinutes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShiftRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    clockInTime?: true
    clockInLatitude?: true
    clockInLongitude?: true
    clockInNote?: true
    clockOutTime?: true
    clockOutLatitude?: true
    clockOutLongitude?: true
    clockOutNote?: true
    durationMinutes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShiftRecordCountAggregateInputType = {
    id?: true
    userId?: true
    clockInTime?: true
    clockInLatitude?: true
    clockInLongitude?: true
    clockInNote?: true
    clockOutTime?: true
    clockOutLatitude?: true
    clockOutLongitude?: true
    clockOutNote?: true
    durationMinutes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShiftRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftRecord to aggregate.
     */
    where?: ShiftRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftRecords to fetch.
     */
    orderBy?: ShiftRecordOrderByWithRelationInput | ShiftRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShiftRecords
    **/
    _count?: true | ShiftRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftRecordMaxAggregateInputType
  }

  export type GetShiftRecordAggregateType<T extends ShiftRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateShiftRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShiftRecord[P]>
      : GetScalarType<T[P], AggregateShiftRecord[P]>
  }




  export type ShiftRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftRecordWhereInput
    orderBy?: ShiftRecordOrderByWithAggregationInput | ShiftRecordOrderByWithAggregationInput[]
    by: ShiftRecordScalarFieldEnum[] | ShiftRecordScalarFieldEnum
    having?: ShiftRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftRecordCountAggregateInputType | true
    _avg?: ShiftRecordAvgAggregateInputType
    _sum?: ShiftRecordSumAggregateInputType
    _min?: ShiftRecordMinAggregateInputType
    _max?: ShiftRecordMaxAggregateInputType
  }

  export type ShiftRecordGroupByOutputType = {
    id: string
    userId: string
    clockInTime: Date
    clockInLatitude: number
    clockInLongitude: number
    clockInNote: string | null
    clockOutTime: Date | null
    clockOutLatitude: number | null
    clockOutLongitude: number | null
    clockOutNote: string | null
    durationMinutes: number | null
    status: $Enums.ShiftStatus
    createdAt: Date
    updatedAt: Date
    _count: ShiftRecordCountAggregateOutputType | null
    _avg: ShiftRecordAvgAggregateOutputType | null
    _sum: ShiftRecordSumAggregateOutputType | null
    _min: ShiftRecordMinAggregateOutputType | null
    _max: ShiftRecordMaxAggregateOutputType | null
  }

  type GetShiftRecordGroupByPayload<T extends ShiftRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftRecordGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftRecordGroupByOutputType[P]>
        }
      >
    >


  export type ShiftRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clockInTime?: boolean
    clockInLatitude?: boolean
    clockInLongitude?: boolean
    clockInNote?: boolean
    clockOutTime?: boolean
    clockOutLatitude?: boolean
    clockOutLongitude?: boolean
    clockOutNote?: boolean
    durationMinutes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftRecord"]>

  export type ShiftRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clockInTime?: boolean
    clockInLatitude?: boolean
    clockInLongitude?: boolean
    clockInNote?: boolean
    clockOutTime?: boolean
    clockOutLatitude?: boolean
    clockOutLongitude?: boolean
    clockOutNote?: boolean
    durationMinutes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftRecord"]>

  export type ShiftRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    clockInTime?: boolean
    clockInLatitude?: boolean
    clockInLongitude?: boolean
    clockInNote?: boolean
    clockOutTime?: boolean
    clockOutLatitude?: boolean
    clockOutLongitude?: boolean
    clockOutNote?: boolean
    durationMinutes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShiftRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShiftRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShiftRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShiftRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      clockInTime: Date
      clockInLatitude: number
      clockInLongitude: number
      clockInNote: string | null
      clockOutTime: Date | null
      clockOutLatitude: number | null
      clockOutLongitude: number | null
      clockOutNote: string | null
      durationMinutes: number | null
      status: $Enums.ShiftStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shiftRecord"]>
    composites: {}
  }

  type ShiftRecordGetPayload<S extends boolean | null | undefined | ShiftRecordDefaultArgs> = $Result.GetResult<Prisma.$ShiftRecordPayload, S>

  type ShiftRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShiftRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShiftRecordCountAggregateInputType | true
    }

  export interface ShiftRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShiftRecord'], meta: { name: 'ShiftRecord' } }
    /**
     * Find zero or one ShiftRecord that matches the filter.
     * @param {ShiftRecordFindUniqueArgs} args - Arguments to find a ShiftRecord
     * @example
     * // Get one ShiftRecord
     * const shiftRecord = await prisma.shiftRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftRecordFindUniqueArgs>(args: SelectSubset<T, ShiftRecordFindUniqueArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShiftRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShiftRecordFindUniqueOrThrowArgs} args - Arguments to find a ShiftRecord
     * @example
     * // Get one ShiftRecord
     * const shiftRecord = await prisma.shiftRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShiftRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordFindFirstArgs} args - Arguments to find a ShiftRecord
     * @example
     * // Get one ShiftRecord
     * const shiftRecord = await prisma.shiftRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftRecordFindFirstArgs>(args?: SelectSubset<T, ShiftRecordFindFirstArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShiftRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordFindFirstOrThrowArgs} args - Arguments to find a ShiftRecord
     * @example
     * // Get one ShiftRecord
     * const shiftRecord = await prisma.shiftRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShiftRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShiftRecords
     * const shiftRecords = await prisma.shiftRecord.findMany()
     * 
     * // Get first 10 ShiftRecords
     * const shiftRecords = await prisma.shiftRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftRecordWithIdOnly = await prisma.shiftRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftRecordFindManyArgs>(args?: SelectSubset<T, ShiftRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShiftRecord.
     * @param {ShiftRecordCreateArgs} args - Arguments to create a ShiftRecord.
     * @example
     * // Create one ShiftRecord
     * const ShiftRecord = await prisma.shiftRecord.create({
     *   data: {
     *     // ... data to create a ShiftRecord
     *   }
     * })
     * 
     */
    create<T extends ShiftRecordCreateArgs>(args: SelectSubset<T, ShiftRecordCreateArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShiftRecords.
     * @param {ShiftRecordCreateManyArgs} args - Arguments to create many ShiftRecords.
     * @example
     * // Create many ShiftRecords
     * const shiftRecord = await prisma.shiftRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftRecordCreateManyArgs>(args?: SelectSubset<T, ShiftRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShiftRecords and returns the data saved in the database.
     * @param {ShiftRecordCreateManyAndReturnArgs} args - Arguments to create many ShiftRecords.
     * @example
     * // Create many ShiftRecords
     * const shiftRecord = await prisma.shiftRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShiftRecords and only return the `id`
     * const shiftRecordWithIdOnly = await prisma.shiftRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShiftRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, ShiftRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShiftRecord.
     * @param {ShiftRecordDeleteArgs} args - Arguments to delete one ShiftRecord.
     * @example
     * // Delete one ShiftRecord
     * const ShiftRecord = await prisma.shiftRecord.delete({
     *   where: {
     *     // ... filter to delete one ShiftRecord
     *   }
     * })
     * 
     */
    delete<T extends ShiftRecordDeleteArgs>(args: SelectSubset<T, ShiftRecordDeleteArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShiftRecord.
     * @param {ShiftRecordUpdateArgs} args - Arguments to update one ShiftRecord.
     * @example
     * // Update one ShiftRecord
     * const shiftRecord = await prisma.shiftRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftRecordUpdateArgs>(args: SelectSubset<T, ShiftRecordUpdateArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShiftRecords.
     * @param {ShiftRecordDeleteManyArgs} args - Arguments to filter ShiftRecords to delete.
     * @example
     * // Delete a few ShiftRecords
     * const { count } = await prisma.shiftRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftRecordDeleteManyArgs>(args?: SelectSubset<T, ShiftRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShiftRecords
     * const shiftRecord = await prisma.shiftRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftRecordUpdateManyArgs>(args: SelectSubset<T, ShiftRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShiftRecord.
     * @param {ShiftRecordUpsertArgs} args - Arguments to update or create a ShiftRecord.
     * @example
     * // Update or create a ShiftRecord
     * const shiftRecord = await prisma.shiftRecord.upsert({
     *   create: {
     *     // ... data to create a ShiftRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShiftRecord we want to update
     *   }
     * })
     */
    upsert<T extends ShiftRecordUpsertArgs>(args: SelectSubset<T, ShiftRecordUpsertArgs<ExtArgs>>): Prisma__ShiftRecordClient<$Result.GetResult<Prisma.$ShiftRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShiftRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordCountArgs} args - Arguments to filter ShiftRecords to count.
     * @example
     * // Count the number of ShiftRecords
     * const count = await prisma.shiftRecord.count({
     *   where: {
     *     // ... the filter for the ShiftRecords we want to count
     *   }
     * })
    **/
    count<T extends ShiftRecordCountArgs>(
      args?: Subset<T, ShiftRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShiftRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftRecordAggregateArgs>(args: Subset<T, ShiftRecordAggregateArgs>): Prisma.PrismaPromise<GetShiftRecordAggregateType<T>>

    /**
     * Group by ShiftRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftRecordGroupByArgs['orderBy'] }
        : { orderBy?: ShiftRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShiftRecord model
   */
  readonly fields: ShiftRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShiftRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShiftRecord model
   */ 
  interface ShiftRecordFieldRefs {
    readonly id: FieldRef<"ShiftRecord", 'String'>
    readonly userId: FieldRef<"ShiftRecord", 'String'>
    readonly clockInTime: FieldRef<"ShiftRecord", 'DateTime'>
    readonly clockInLatitude: FieldRef<"ShiftRecord", 'Float'>
    readonly clockInLongitude: FieldRef<"ShiftRecord", 'Float'>
    readonly clockInNote: FieldRef<"ShiftRecord", 'String'>
    readonly clockOutTime: FieldRef<"ShiftRecord", 'DateTime'>
    readonly clockOutLatitude: FieldRef<"ShiftRecord", 'Float'>
    readonly clockOutLongitude: FieldRef<"ShiftRecord", 'Float'>
    readonly clockOutNote: FieldRef<"ShiftRecord", 'String'>
    readonly durationMinutes: FieldRef<"ShiftRecord", 'Int'>
    readonly status: FieldRef<"ShiftRecord", 'ShiftStatus'>
    readonly createdAt: FieldRef<"ShiftRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"ShiftRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShiftRecord findUnique
   */
  export type ShiftRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * Filter, which ShiftRecord to fetch.
     */
    where: ShiftRecordWhereUniqueInput
  }

  /**
   * ShiftRecord findUniqueOrThrow
   */
  export type ShiftRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * Filter, which ShiftRecord to fetch.
     */
    where: ShiftRecordWhereUniqueInput
  }

  /**
   * ShiftRecord findFirst
   */
  export type ShiftRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * Filter, which ShiftRecord to fetch.
     */
    where?: ShiftRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftRecords to fetch.
     */
    orderBy?: ShiftRecordOrderByWithRelationInput | ShiftRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftRecords.
     */
    cursor?: ShiftRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftRecords.
     */
    distinct?: ShiftRecordScalarFieldEnum | ShiftRecordScalarFieldEnum[]
  }

  /**
   * ShiftRecord findFirstOrThrow
   */
  export type ShiftRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * Filter, which ShiftRecord to fetch.
     */
    where?: ShiftRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftRecords to fetch.
     */
    orderBy?: ShiftRecordOrderByWithRelationInput | ShiftRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftRecords.
     */
    cursor?: ShiftRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftRecords.
     */
    distinct?: ShiftRecordScalarFieldEnum | ShiftRecordScalarFieldEnum[]
  }

  /**
   * ShiftRecord findMany
   */
  export type ShiftRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * Filter, which ShiftRecords to fetch.
     */
    where?: ShiftRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftRecords to fetch.
     */
    orderBy?: ShiftRecordOrderByWithRelationInput | ShiftRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShiftRecords.
     */
    cursor?: ShiftRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftRecords.
     */
    skip?: number
    distinct?: ShiftRecordScalarFieldEnum | ShiftRecordScalarFieldEnum[]
  }

  /**
   * ShiftRecord create
   */
  export type ShiftRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a ShiftRecord.
     */
    data: XOR<ShiftRecordCreateInput, ShiftRecordUncheckedCreateInput>
  }

  /**
   * ShiftRecord createMany
   */
  export type ShiftRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShiftRecords.
     */
    data: ShiftRecordCreateManyInput | ShiftRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShiftRecord createManyAndReturn
   */
  export type ShiftRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShiftRecords.
     */
    data: ShiftRecordCreateManyInput | ShiftRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShiftRecord update
   */
  export type ShiftRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a ShiftRecord.
     */
    data: XOR<ShiftRecordUpdateInput, ShiftRecordUncheckedUpdateInput>
    /**
     * Choose, which ShiftRecord to update.
     */
    where: ShiftRecordWhereUniqueInput
  }

  /**
   * ShiftRecord updateMany
   */
  export type ShiftRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShiftRecords.
     */
    data: XOR<ShiftRecordUpdateManyMutationInput, ShiftRecordUncheckedUpdateManyInput>
    /**
     * Filter which ShiftRecords to update
     */
    where?: ShiftRecordWhereInput
  }

  /**
   * ShiftRecord upsert
   */
  export type ShiftRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the ShiftRecord to update in case it exists.
     */
    where: ShiftRecordWhereUniqueInput
    /**
     * In case the ShiftRecord found by the `where` argument doesn't exist, create a new ShiftRecord with this data.
     */
    create: XOR<ShiftRecordCreateInput, ShiftRecordUncheckedCreateInput>
    /**
     * In case the ShiftRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftRecordUpdateInput, ShiftRecordUncheckedUpdateInput>
  }

  /**
   * ShiftRecord delete
   */
  export type ShiftRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
    /**
     * Filter which ShiftRecord to delete.
     */
    where: ShiftRecordWhereUniqueInput
  }

  /**
   * ShiftRecord deleteMany
   */
  export type ShiftRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftRecords to delete
     */
    where?: ShiftRecordWhereInput
  }

  /**
   * ShiftRecord without action
   */
  export type ShiftRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftRecord
     */
    select?: ShiftRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftRecordInclude<ExtArgs> | null
  }


  /**
   * Model LocationPerimeter
   */

  export type AggregateLocationPerimeter = {
    _count: LocationPerimeterCountAggregateOutputType | null
    _avg: LocationPerimeterAvgAggregateOutputType | null
    _sum: LocationPerimeterSumAggregateOutputType | null
    _min: LocationPerimeterMinAggregateOutputType | null
    _max: LocationPerimeterMaxAggregateOutputType | null
  }

  export type LocationPerimeterAvgAggregateOutputType = {
    centerLatitude: number | null
    centerLongitude: number | null
    radiusKm: number | null
  }

  export type LocationPerimeterSumAggregateOutputType = {
    centerLatitude: number | null
    centerLongitude: number | null
    radiusKm: number | null
  }

  export type LocationPerimeterMinAggregateOutputType = {
    id: string | null
    name: string | null
    centerLatitude: number | null
    centerLongitude: number | null
    radiusKm: number | null
    createdBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationPerimeterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    centerLatitude: number | null
    centerLongitude: number | null
    radiusKm: number | null
    createdBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationPerimeterCountAggregateOutputType = {
    id: number
    name: number
    centerLatitude: number
    centerLongitude: number
    radiusKm: number
    createdBy: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationPerimeterAvgAggregateInputType = {
    centerLatitude?: true
    centerLongitude?: true
    radiusKm?: true
  }

  export type LocationPerimeterSumAggregateInputType = {
    centerLatitude?: true
    centerLongitude?: true
    radiusKm?: true
  }

  export type LocationPerimeterMinAggregateInputType = {
    id?: true
    name?: true
    centerLatitude?: true
    centerLongitude?: true
    radiusKm?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationPerimeterMaxAggregateInputType = {
    id?: true
    name?: true
    centerLatitude?: true
    centerLongitude?: true
    radiusKm?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationPerimeterCountAggregateInputType = {
    id?: true
    name?: true
    centerLatitude?: true
    centerLongitude?: true
    radiusKm?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationPerimeterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationPerimeter to aggregate.
     */
    where?: LocationPerimeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationPerimeters to fetch.
     */
    orderBy?: LocationPerimeterOrderByWithRelationInput | LocationPerimeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationPerimeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationPerimeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationPerimeters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationPerimeters
    **/
    _count?: true | LocationPerimeterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationPerimeterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationPerimeterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationPerimeterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationPerimeterMaxAggregateInputType
  }

  export type GetLocationPerimeterAggregateType<T extends LocationPerimeterAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationPerimeter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationPerimeter[P]>
      : GetScalarType<T[P], AggregateLocationPerimeter[P]>
  }




  export type LocationPerimeterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationPerimeterWhereInput
    orderBy?: LocationPerimeterOrderByWithAggregationInput | LocationPerimeterOrderByWithAggregationInput[]
    by: LocationPerimeterScalarFieldEnum[] | LocationPerimeterScalarFieldEnum
    having?: LocationPerimeterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationPerimeterCountAggregateInputType | true
    _avg?: LocationPerimeterAvgAggregateInputType
    _sum?: LocationPerimeterSumAggregateInputType
    _min?: LocationPerimeterMinAggregateInputType
    _max?: LocationPerimeterMaxAggregateInputType
  }

  export type LocationPerimeterGroupByOutputType = {
    id: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm: number
    createdBy: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: LocationPerimeterCountAggregateOutputType | null
    _avg: LocationPerimeterAvgAggregateOutputType | null
    _sum: LocationPerimeterSumAggregateOutputType | null
    _min: LocationPerimeterMinAggregateOutputType | null
    _max: LocationPerimeterMaxAggregateOutputType | null
  }

  type GetLocationPerimeterGroupByPayload<T extends LocationPerimeterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationPerimeterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationPerimeterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationPerimeterGroupByOutputType[P]>
            : GetScalarType<T[P], LocationPerimeterGroupByOutputType[P]>
        }
      >
    >


  export type LocationPerimeterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    centerLatitude?: boolean
    centerLongitude?: boolean
    radiusKm?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationPerimeter"]>

  export type LocationPerimeterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    centerLatitude?: boolean
    centerLongitude?: boolean
    radiusKm?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationPerimeter"]>

  export type LocationPerimeterSelectScalar = {
    id?: boolean
    name?: boolean
    centerLatitude?: boolean
    centerLongitude?: boolean
    radiusKm?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationPerimeterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LocationPerimeterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LocationPerimeterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationPerimeter"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      centerLatitude: number
      centerLongitude: number
      radiusKm: number
      createdBy: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["locationPerimeter"]>
    composites: {}
  }

  type LocationPerimeterGetPayload<S extends boolean | null | undefined | LocationPerimeterDefaultArgs> = $Result.GetResult<Prisma.$LocationPerimeterPayload, S>

  type LocationPerimeterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationPerimeterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationPerimeterCountAggregateInputType | true
    }

  export interface LocationPerimeterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationPerimeter'], meta: { name: 'LocationPerimeter' } }
    /**
     * Find zero or one LocationPerimeter that matches the filter.
     * @param {LocationPerimeterFindUniqueArgs} args - Arguments to find a LocationPerimeter
     * @example
     * // Get one LocationPerimeter
     * const locationPerimeter = await prisma.locationPerimeter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationPerimeterFindUniqueArgs>(args: SelectSubset<T, LocationPerimeterFindUniqueArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LocationPerimeter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationPerimeterFindUniqueOrThrowArgs} args - Arguments to find a LocationPerimeter
     * @example
     * // Get one LocationPerimeter
     * const locationPerimeter = await prisma.locationPerimeter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationPerimeterFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationPerimeterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LocationPerimeter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterFindFirstArgs} args - Arguments to find a LocationPerimeter
     * @example
     * // Get one LocationPerimeter
     * const locationPerimeter = await prisma.locationPerimeter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationPerimeterFindFirstArgs>(args?: SelectSubset<T, LocationPerimeterFindFirstArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LocationPerimeter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterFindFirstOrThrowArgs} args - Arguments to find a LocationPerimeter
     * @example
     * // Get one LocationPerimeter
     * const locationPerimeter = await prisma.locationPerimeter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationPerimeterFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationPerimeterFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LocationPerimeters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationPerimeters
     * const locationPerimeters = await prisma.locationPerimeter.findMany()
     * 
     * // Get first 10 LocationPerimeters
     * const locationPerimeters = await prisma.locationPerimeter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationPerimeterWithIdOnly = await prisma.locationPerimeter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationPerimeterFindManyArgs>(args?: SelectSubset<T, LocationPerimeterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LocationPerimeter.
     * @param {LocationPerimeterCreateArgs} args - Arguments to create a LocationPerimeter.
     * @example
     * // Create one LocationPerimeter
     * const LocationPerimeter = await prisma.locationPerimeter.create({
     *   data: {
     *     // ... data to create a LocationPerimeter
     *   }
     * })
     * 
     */
    create<T extends LocationPerimeterCreateArgs>(args: SelectSubset<T, LocationPerimeterCreateArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LocationPerimeters.
     * @param {LocationPerimeterCreateManyArgs} args - Arguments to create many LocationPerimeters.
     * @example
     * // Create many LocationPerimeters
     * const locationPerimeter = await prisma.locationPerimeter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationPerimeterCreateManyArgs>(args?: SelectSubset<T, LocationPerimeterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationPerimeters and returns the data saved in the database.
     * @param {LocationPerimeterCreateManyAndReturnArgs} args - Arguments to create many LocationPerimeters.
     * @example
     * // Create many LocationPerimeters
     * const locationPerimeter = await prisma.locationPerimeter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationPerimeters and only return the `id`
     * const locationPerimeterWithIdOnly = await prisma.locationPerimeter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationPerimeterCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationPerimeterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LocationPerimeter.
     * @param {LocationPerimeterDeleteArgs} args - Arguments to delete one LocationPerimeter.
     * @example
     * // Delete one LocationPerimeter
     * const LocationPerimeter = await prisma.locationPerimeter.delete({
     *   where: {
     *     // ... filter to delete one LocationPerimeter
     *   }
     * })
     * 
     */
    delete<T extends LocationPerimeterDeleteArgs>(args: SelectSubset<T, LocationPerimeterDeleteArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LocationPerimeter.
     * @param {LocationPerimeterUpdateArgs} args - Arguments to update one LocationPerimeter.
     * @example
     * // Update one LocationPerimeter
     * const locationPerimeter = await prisma.locationPerimeter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationPerimeterUpdateArgs>(args: SelectSubset<T, LocationPerimeterUpdateArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LocationPerimeters.
     * @param {LocationPerimeterDeleteManyArgs} args - Arguments to filter LocationPerimeters to delete.
     * @example
     * // Delete a few LocationPerimeters
     * const { count } = await prisma.locationPerimeter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationPerimeterDeleteManyArgs>(args?: SelectSubset<T, LocationPerimeterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationPerimeters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationPerimeters
     * const locationPerimeter = await prisma.locationPerimeter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationPerimeterUpdateManyArgs>(args: SelectSubset<T, LocationPerimeterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocationPerimeter.
     * @param {LocationPerimeterUpsertArgs} args - Arguments to update or create a LocationPerimeter.
     * @example
     * // Update or create a LocationPerimeter
     * const locationPerimeter = await prisma.locationPerimeter.upsert({
     *   create: {
     *     // ... data to create a LocationPerimeter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationPerimeter we want to update
     *   }
     * })
     */
    upsert<T extends LocationPerimeterUpsertArgs>(args: SelectSubset<T, LocationPerimeterUpsertArgs<ExtArgs>>): Prisma__LocationPerimeterClient<$Result.GetResult<Prisma.$LocationPerimeterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LocationPerimeters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterCountArgs} args - Arguments to filter LocationPerimeters to count.
     * @example
     * // Count the number of LocationPerimeters
     * const count = await prisma.locationPerimeter.count({
     *   where: {
     *     // ... the filter for the LocationPerimeters we want to count
     *   }
     * })
    **/
    count<T extends LocationPerimeterCountArgs>(
      args?: Subset<T, LocationPerimeterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationPerimeterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationPerimeter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationPerimeterAggregateArgs>(args: Subset<T, LocationPerimeterAggregateArgs>): Prisma.PrismaPromise<GetLocationPerimeterAggregateType<T>>

    /**
     * Group by LocationPerimeter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationPerimeterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationPerimeterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationPerimeterGroupByArgs['orderBy'] }
        : { orderBy?: LocationPerimeterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationPerimeterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationPerimeterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationPerimeter model
   */
  readonly fields: LocationPerimeterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationPerimeter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationPerimeterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationPerimeter model
   */ 
  interface LocationPerimeterFieldRefs {
    readonly id: FieldRef<"LocationPerimeter", 'String'>
    readonly name: FieldRef<"LocationPerimeter", 'String'>
    readonly centerLatitude: FieldRef<"LocationPerimeter", 'Float'>
    readonly centerLongitude: FieldRef<"LocationPerimeter", 'Float'>
    readonly radiusKm: FieldRef<"LocationPerimeter", 'Float'>
    readonly createdBy: FieldRef<"LocationPerimeter", 'String'>
    readonly isActive: FieldRef<"LocationPerimeter", 'Boolean'>
    readonly createdAt: FieldRef<"LocationPerimeter", 'DateTime'>
    readonly updatedAt: FieldRef<"LocationPerimeter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LocationPerimeter findUnique
   */
  export type LocationPerimeterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * Filter, which LocationPerimeter to fetch.
     */
    where: LocationPerimeterWhereUniqueInput
  }

  /**
   * LocationPerimeter findUniqueOrThrow
   */
  export type LocationPerimeterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * Filter, which LocationPerimeter to fetch.
     */
    where: LocationPerimeterWhereUniqueInput
  }

  /**
   * LocationPerimeter findFirst
   */
  export type LocationPerimeterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * Filter, which LocationPerimeter to fetch.
     */
    where?: LocationPerimeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationPerimeters to fetch.
     */
    orderBy?: LocationPerimeterOrderByWithRelationInput | LocationPerimeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationPerimeters.
     */
    cursor?: LocationPerimeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationPerimeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationPerimeters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationPerimeters.
     */
    distinct?: LocationPerimeterScalarFieldEnum | LocationPerimeterScalarFieldEnum[]
  }

  /**
   * LocationPerimeter findFirstOrThrow
   */
  export type LocationPerimeterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * Filter, which LocationPerimeter to fetch.
     */
    where?: LocationPerimeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationPerimeters to fetch.
     */
    orderBy?: LocationPerimeterOrderByWithRelationInput | LocationPerimeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationPerimeters.
     */
    cursor?: LocationPerimeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationPerimeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationPerimeters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationPerimeters.
     */
    distinct?: LocationPerimeterScalarFieldEnum | LocationPerimeterScalarFieldEnum[]
  }

  /**
   * LocationPerimeter findMany
   */
  export type LocationPerimeterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * Filter, which LocationPerimeters to fetch.
     */
    where?: LocationPerimeterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationPerimeters to fetch.
     */
    orderBy?: LocationPerimeterOrderByWithRelationInput | LocationPerimeterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationPerimeters.
     */
    cursor?: LocationPerimeterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationPerimeters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationPerimeters.
     */
    skip?: number
    distinct?: LocationPerimeterScalarFieldEnum | LocationPerimeterScalarFieldEnum[]
  }

  /**
   * LocationPerimeter create
   */
  export type LocationPerimeterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationPerimeter.
     */
    data: XOR<LocationPerimeterCreateInput, LocationPerimeterUncheckedCreateInput>
  }

  /**
   * LocationPerimeter createMany
   */
  export type LocationPerimeterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationPerimeters.
     */
    data: LocationPerimeterCreateManyInput | LocationPerimeterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationPerimeter createManyAndReturn
   */
  export type LocationPerimeterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LocationPerimeters.
     */
    data: LocationPerimeterCreateManyInput | LocationPerimeterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationPerimeter update
   */
  export type LocationPerimeterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationPerimeter.
     */
    data: XOR<LocationPerimeterUpdateInput, LocationPerimeterUncheckedUpdateInput>
    /**
     * Choose, which LocationPerimeter to update.
     */
    where: LocationPerimeterWhereUniqueInput
  }

  /**
   * LocationPerimeter updateMany
   */
  export type LocationPerimeterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationPerimeters.
     */
    data: XOR<LocationPerimeterUpdateManyMutationInput, LocationPerimeterUncheckedUpdateManyInput>
    /**
     * Filter which LocationPerimeters to update
     */
    where?: LocationPerimeterWhereInput
  }

  /**
   * LocationPerimeter upsert
   */
  export type LocationPerimeterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationPerimeter to update in case it exists.
     */
    where: LocationPerimeterWhereUniqueInput
    /**
     * In case the LocationPerimeter found by the `where` argument doesn't exist, create a new LocationPerimeter with this data.
     */
    create: XOR<LocationPerimeterCreateInput, LocationPerimeterUncheckedCreateInput>
    /**
     * In case the LocationPerimeter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationPerimeterUpdateInput, LocationPerimeterUncheckedUpdateInput>
  }

  /**
   * LocationPerimeter delete
   */
  export type LocationPerimeterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
    /**
     * Filter which LocationPerimeter to delete.
     */
    where: LocationPerimeterWhereUniqueInput
  }

  /**
   * LocationPerimeter deleteMany
   */
  export type LocationPerimeterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationPerimeters to delete
     */
    where?: LocationPerimeterWhereInput
  }

  /**
   * LocationPerimeter without action
   */
  export type LocationPerimeterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationPerimeter
     */
    select?: LocationPerimeterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationPerimeterInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    role: 'role',
    auth0Id: 'auth0Id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ShiftRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clockInTime: 'clockInTime',
    clockInLatitude: 'clockInLatitude',
    clockInLongitude: 'clockInLongitude',
    clockInNote: 'clockInNote',
    clockOutTime: 'clockOutTime',
    clockOutLatitude: 'clockOutLatitude',
    clockOutLongitude: 'clockOutLongitude',
    clockOutNote: 'clockOutNote',
    durationMinutes: 'durationMinutes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShiftRecordScalarFieldEnum = (typeof ShiftRecordScalarFieldEnum)[keyof typeof ShiftRecordScalarFieldEnum]


  export const LocationPerimeterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    centerLatitude: 'centerLatitude',
    centerLongitude: 'centerLongitude',
    radiusKm: 'radiusKm',
    createdBy: 'createdBy',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationPerimeterScalarFieldEnum = (typeof LocationPerimeterScalarFieldEnum)[keyof typeof LocationPerimeterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ShiftStatus'
   */
  export type EnumShiftStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShiftStatus'>
    


  /**
   * Reference to a field of type 'ShiftStatus[]'
   */
  export type ListEnumShiftStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShiftStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    auth0Id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    shifts?: ShiftRecordListRelationFilter
    createdPerimeters?: LocationPerimeterListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shifts?: ShiftRecordOrderByRelationAggregateInput
    createdPerimeters?: LocationPerimeterOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    auth0Id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    shifts?: ShiftRecordListRelationFilter
    createdPerimeters?: LocationPerimeterListRelationFilter
  }, "id" | "email" | "auth0Id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    auth0Id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ShiftRecordWhereInput = {
    AND?: ShiftRecordWhereInput | ShiftRecordWhereInput[]
    OR?: ShiftRecordWhereInput[]
    NOT?: ShiftRecordWhereInput | ShiftRecordWhereInput[]
    id?: StringFilter<"ShiftRecord"> | string
    userId?: StringFilter<"ShiftRecord"> | string
    clockInTime?: DateTimeFilter<"ShiftRecord"> | Date | string
    clockInLatitude?: FloatFilter<"ShiftRecord"> | number
    clockInLongitude?: FloatFilter<"ShiftRecord"> | number
    clockInNote?: StringNullableFilter<"ShiftRecord"> | string | null
    clockOutTime?: DateTimeNullableFilter<"ShiftRecord"> | Date | string | null
    clockOutLatitude?: FloatNullableFilter<"ShiftRecord"> | number | null
    clockOutLongitude?: FloatNullableFilter<"ShiftRecord"> | number | null
    clockOutNote?: StringNullableFilter<"ShiftRecord"> | string | null
    durationMinutes?: IntNullableFilter<"ShiftRecord"> | number | null
    status?: EnumShiftStatusFilter<"ShiftRecord"> | $Enums.ShiftStatus
    createdAt?: DateTimeFilter<"ShiftRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftRecord"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShiftRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clockInTime?: SortOrder
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockInNote?: SortOrderInput | SortOrder
    clockOutTime?: SortOrderInput | SortOrder
    clockOutLatitude?: SortOrderInput | SortOrder
    clockOutLongitude?: SortOrderInput | SortOrder
    clockOutNote?: SortOrderInput | SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ShiftRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShiftRecordWhereInput | ShiftRecordWhereInput[]
    OR?: ShiftRecordWhereInput[]
    NOT?: ShiftRecordWhereInput | ShiftRecordWhereInput[]
    userId?: StringFilter<"ShiftRecord"> | string
    clockInTime?: DateTimeFilter<"ShiftRecord"> | Date | string
    clockInLatitude?: FloatFilter<"ShiftRecord"> | number
    clockInLongitude?: FloatFilter<"ShiftRecord"> | number
    clockInNote?: StringNullableFilter<"ShiftRecord"> | string | null
    clockOutTime?: DateTimeNullableFilter<"ShiftRecord"> | Date | string | null
    clockOutLatitude?: FloatNullableFilter<"ShiftRecord"> | number | null
    clockOutLongitude?: FloatNullableFilter<"ShiftRecord"> | number | null
    clockOutNote?: StringNullableFilter<"ShiftRecord"> | string | null
    durationMinutes?: IntNullableFilter<"ShiftRecord"> | number | null
    status?: EnumShiftStatusFilter<"ShiftRecord"> | $Enums.ShiftStatus
    createdAt?: DateTimeFilter<"ShiftRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftRecord"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ShiftRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clockInTime?: SortOrder
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockInNote?: SortOrderInput | SortOrder
    clockOutTime?: SortOrderInput | SortOrder
    clockOutLatitude?: SortOrderInput | SortOrder
    clockOutLongitude?: SortOrderInput | SortOrder
    clockOutNote?: SortOrderInput | SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShiftRecordCountOrderByAggregateInput
    _avg?: ShiftRecordAvgOrderByAggregateInput
    _max?: ShiftRecordMaxOrderByAggregateInput
    _min?: ShiftRecordMinOrderByAggregateInput
    _sum?: ShiftRecordSumOrderByAggregateInput
  }

  export type ShiftRecordScalarWhereWithAggregatesInput = {
    AND?: ShiftRecordScalarWhereWithAggregatesInput | ShiftRecordScalarWhereWithAggregatesInput[]
    OR?: ShiftRecordScalarWhereWithAggregatesInput[]
    NOT?: ShiftRecordScalarWhereWithAggregatesInput | ShiftRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShiftRecord"> | string
    userId?: StringWithAggregatesFilter<"ShiftRecord"> | string
    clockInTime?: DateTimeWithAggregatesFilter<"ShiftRecord"> | Date | string
    clockInLatitude?: FloatWithAggregatesFilter<"ShiftRecord"> | number
    clockInLongitude?: FloatWithAggregatesFilter<"ShiftRecord"> | number
    clockInNote?: StringNullableWithAggregatesFilter<"ShiftRecord"> | string | null
    clockOutTime?: DateTimeNullableWithAggregatesFilter<"ShiftRecord"> | Date | string | null
    clockOutLatitude?: FloatNullableWithAggregatesFilter<"ShiftRecord"> | number | null
    clockOutLongitude?: FloatNullableWithAggregatesFilter<"ShiftRecord"> | number | null
    clockOutNote?: StringNullableWithAggregatesFilter<"ShiftRecord"> | string | null
    durationMinutes?: IntNullableWithAggregatesFilter<"ShiftRecord"> | number | null
    status?: EnumShiftStatusWithAggregatesFilter<"ShiftRecord"> | $Enums.ShiftStatus
    createdAt?: DateTimeWithAggregatesFilter<"ShiftRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShiftRecord"> | Date | string
  }

  export type LocationPerimeterWhereInput = {
    AND?: LocationPerimeterWhereInput | LocationPerimeterWhereInput[]
    OR?: LocationPerimeterWhereInput[]
    NOT?: LocationPerimeterWhereInput | LocationPerimeterWhereInput[]
    id?: StringFilter<"LocationPerimeter"> | string
    name?: StringFilter<"LocationPerimeter"> | string
    centerLatitude?: FloatFilter<"LocationPerimeter"> | number
    centerLongitude?: FloatFilter<"LocationPerimeter"> | number
    radiusKm?: FloatFilter<"LocationPerimeter"> | number
    createdBy?: StringFilter<"LocationPerimeter"> | string
    isActive?: BoolFilter<"LocationPerimeter"> | boolean
    createdAt?: DateTimeFilter<"LocationPerimeter"> | Date | string
    updatedAt?: DateTimeFilter<"LocationPerimeter"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LocationPerimeterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
  }

  export type LocationPerimeterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationPerimeterWhereInput | LocationPerimeterWhereInput[]
    OR?: LocationPerimeterWhereInput[]
    NOT?: LocationPerimeterWhereInput | LocationPerimeterWhereInput[]
    name?: StringFilter<"LocationPerimeter"> | string
    centerLatitude?: FloatFilter<"LocationPerimeter"> | number
    centerLongitude?: FloatFilter<"LocationPerimeter"> | number
    radiusKm?: FloatFilter<"LocationPerimeter"> | number
    createdBy?: StringFilter<"LocationPerimeter"> | string
    isActive?: BoolFilter<"LocationPerimeter"> | boolean
    createdAt?: DateTimeFilter<"LocationPerimeter"> | Date | string
    updatedAt?: DateTimeFilter<"LocationPerimeter"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type LocationPerimeterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationPerimeterCountOrderByAggregateInput
    _avg?: LocationPerimeterAvgOrderByAggregateInput
    _max?: LocationPerimeterMaxOrderByAggregateInput
    _min?: LocationPerimeterMinOrderByAggregateInput
    _sum?: LocationPerimeterSumOrderByAggregateInput
  }

  export type LocationPerimeterScalarWhereWithAggregatesInput = {
    AND?: LocationPerimeterScalarWhereWithAggregatesInput | LocationPerimeterScalarWhereWithAggregatesInput[]
    OR?: LocationPerimeterScalarWhereWithAggregatesInput[]
    NOT?: LocationPerimeterScalarWhereWithAggregatesInput | LocationPerimeterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LocationPerimeter"> | string
    name?: StringWithAggregatesFilter<"LocationPerimeter"> | string
    centerLatitude?: FloatWithAggregatesFilter<"LocationPerimeter"> | number
    centerLongitude?: FloatWithAggregatesFilter<"LocationPerimeter"> | number
    radiusKm?: FloatWithAggregatesFilter<"LocationPerimeter"> | number
    createdBy?: StringWithAggregatesFilter<"LocationPerimeter"> | string
    isActive?: BoolWithAggregatesFilter<"LocationPerimeter"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LocationPerimeter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LocationPerimeter"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftRecordCreateNestedManyWithoutUserInput
    createdPerimeters?: LocationPerimeterCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftRecordUncheckedCreateNestedManyWithoutUserInput
    createdPerimeters?: LocationPerimeterUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftRecordUpdateManyWithoutUserNestedInput
    createdPerimeters?: LocationPerimeterUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftRecordUncheckedUpdateManyWithoutUserNestedInput
    createdPerimeters?: LocationPerimeterUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftRecordCreateInput = {
    id?: string
    clockInTime?: Date | string
    clockInLatitude: number
    clockInLongitude: number
    clockInNote?: string | null
    clockOutTime?: Date | string | null
    clockOutLatitude?: number | null
    clockOutLongitude?: number | null
    clockOutNote?: string | null
    durationMinutes?: number | null
    status?: $Enums.ShiftStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShiftsInput
  }

  export type ShiftRecordUncheckedCreateInput = {
    id?: string
    userId: string
    clockInTime?: Date | string
    clockInLatitude: number
    clockInLongitude: number
    clockInNote?: string | null
    clockOutTime?: Date | string | null
    clockOutLatitude?: number | null
    clockOutLongitude?: number | null
    clockOutNote?: string | null
    durationMinutes?: number | null
    status?: $Enums.ShiftStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShiftsNestedInput
  }

  export type ShiftRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftRecordCreateManyInput = {
    id?: string
    userId: string
    clockInTime?: Date | string
    clockInLatitude: number
    clockInLongitude: number
    clockInNote?: string | null
    clockOutTime?: Date | string | null
    clockOutLatitude?: number | null
    clockOutLongitude?: number | null
    clockOutNote?: string | null
    durationMinutes?: number | null
    status?: $Enums.ShiftStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationPerimeterCreateInput = {
    id?: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedPerimetersInput
  }

  export type LocationPerimeterUncheckedCreateInput = {
    id?: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm?: number
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationPerimeterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedPerimetersNestedInput
  }

  export type LocationPerimeterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationPerimeterCreateManyInput = {
    id?: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm?: number
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationPerimeterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationPerimeterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ShiftRecordListRelationFilter = {
    every?: ShiftRecordWhereInput
    some?: ShiftRecordWhereInput
    none?: ShiftRecordWhereInput
  }

  export type LocationPerimeterListRelationFilter = {
    every?: LocationPerimeterWhereInput
    some?: LocationPerimeterWhereInput
    none?: LocationPerimeterWhereInput
  }

  export type ShiftRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationPerimeterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumShiftStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftStatus | EnumShiftStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftStatusFilter<$PrismaModel> | $Enums.ShiftStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ShiftRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clockInTime?: SortOrder
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockInNote?: SortOrder
    clockOutTime?: SortOrder
    clockOutLatitude?: SortOrder
    clockOutLongitude?: SortOrder
    clockOutNote?: SortOrder
    durationMinutes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftRecordAvgOrderByAggregateInput = {
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockOutLatitude?: SortOrder
    clockOutLongitude?: SortOrder
    durationMinutes?: SortOrder
  }

  export type ShiftRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clockInTime?: SortOrder
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockInNote?: SortOrder
    clockOutTime?: SortOrder
    clockOutLatitude?: SortOrder
    clockOutLongitude?: SortOrder
    clockOutNote?: SortOrder
    durationMinutes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clockInTime?: SortOrder
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockInNote?: SortOrder
    clockOutTime?: SortOrder
    clockOutLatitude?: SortOrder
    clockOutLongitude?: SortOrder
    clockOutNote?: SortOrder
    durationMinutes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShiftRecordSumOrderByAggregateInput = {
    clockInLatitude?: SortOrder
    clockInLongitude?: SortOrder
    clockOutLatitude?: SortOrder
    clockOutLongitude?: SortOrder
    durationMinutes?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumShiftStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftStatus | EnumShiftStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShiftStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShiftStatusFilter<$PrismaModel>
    _max?: NestedEnumShiftStatusFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LocationPerimeterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationPerimeterAvgOrderByAggregateInput = {
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
  }

  export type LocationPerimeterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationPerimeterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationPerimeterSumOrderByAggregateInput = {
    centerLatitude?: SortOrder
    centerLongitude?: SortOrder
    radiusKm?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ShiftRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<ShiftRecordCreateWithoutUserInput, ShiftRecordUncheckedCreateWithoutUserInput> | ShiftRecordCreateWithoutUserInput[] | ShiftRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftRecordCreateOrConnectWithoutUserInput | ShiftRecordCreateOrConnectWithoutUserInput[]
    createMany?: ShiftRecordCreateManyUserInputEnvelope
    connect?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
  }

  export type LocationPerimeterCreateNestedManyWithoutCreatorInput = {
    create?: XOR<LocationPerimeterCreateWithoutCreatorInput, LocationPerimeterUncheckedCreateWithoutCreatorInput> | LocationPerimeterCreateWithoutCreatorInput[] | LocationPerimeterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LocationPerimeterCreateOrConnectWithoutCreatorInput | LocationPerimeterCreateOrConnectWithoutCreatorInput[]
    createMany?: LocationPerimeterCreateManyCreatorInputEnvelope
    connect?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
  }

  export type ShiftRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShiftRecordCreateWithoutUserInput, ShiftRecordUncheckedCreateWithoutUserInput> | ShiftRecordCreateWithoutUserInput[] | ShiftRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftRecordCreateOrConnectWithoutUserInput | ShiftRecordCreateOrConnectWithoutUserInput[]
    createMany?: ShiftRecordCreateManyUserInputEnvelope
    connect?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
  }

  export type LocationPerimeterUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<LocationPerimeterCreateWithoutCreatorInput, LocationPerimeterUncheckedCreateWithoutCreatorInput> | LocationPerimeterCreateWithoutCreatorInput[] | LocationPerimeterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LocationPerimeterCreateOrConnectWithoutCreatorInput | LocationPerimeterCreateOrConnectWithoutCreatorInput[]
    createMany?: LocationPerimeterCreateManyCreatorInputEnvelope
    connect?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ShiftRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShiftRecordCreateWithoutUserInput, ShiftRecordUncheckedCreateWithoutUserInput> | ShiftRecordCreateWithoutUserInput[] | ShiftRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftRecordCreateOrConnectWithoutUserInput | ShiftRecordCreateOrConnectWithoutUserInput[]
    upsert?: ShiftRecordUpsertWithWhereUniqueWithoutUserInput | ShiftRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShiftRecordCreateManyUserInputEnvelope
    set?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    disconnect?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    delete?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    connect?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    update?: ShiftRecordUpdateWithWhereUniqueWithoutUserInput | ShiftRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShiftRecordUpdateManyWithWhereWithoutUserInput | ShiftRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShiftRecordScalarWhereInput | ShiftRecordScalarWhereInput[]
  }

  export type LocationPerimeterUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<LocationPerimeterCreateWithoutCreatorInput, LocationPerimeterUncheckedCreateWithoutCreatorInput> | LocationPerimeterCreateWithoutCreatorInput[] | LocationPerimeterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LocationPerimeterCreateOrConnectWithoutCreatorInput | LocationPerimeterCreateOrConnectWithoutCreatorInput[]
    upsert?: LocationPerimeterUpsertWithWhereUniqueWithoutCreatorInput | LocationPerimeterUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: LocationPerimeterCreateManyCreatorInputEnvelope
    set?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    disconnect?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    delete?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    connect?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    update?: LocationPerimeterUpdateWithWhereUniqueWithoutCreatorInput | LocationPerimeterUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: LocationPerimeterUpdateManyWithWhereWithoutCreatorInput | LocationPerimeterUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: LocationPerimeterScalarWhereInput | LocationPerimeterScalarWhereInput[]
  }

  export type ShiftRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShiftRecordCreateWithoutUserInput, ShiftRecordUncheckedCreateWithoutUserInput> | ShiftRecordCreateWithoutUserInput[] | ShiftRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShiftRecordCreateOrConnectWithoutUserInput | ShiftRecordCreateOrConnectWithoutUserInput[]
    upsert?: ShiftRecordUpsertWithWhereUniqueWithoutUserInput | ShiftRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShiftRecordCreateManyUserInputEnvelope
    set?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    disconnect?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    delete?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    connect?: ShiftRecordWhereUniqueInput | ShiftRecordWhereUniqueInput[]
    update?: ShiftRecordUpdateWithWhereUniqueWithoutUserInput | ShiftRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShiftRecordUpdateManyWithWhereWithoutUserInput | ShiftRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShiftRecordScalarWhereInput | ShiftRecordScalarWhereInput[]
  }

  export type LocationPerimeterUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<LocationPerimeterCreateWithoutCreatorInput, LocationPerimeterUncheckedCreateWithoutCreatorInput> | LocationPerimeterCreateWithoutCreatorInput[] | LocationPerimeterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LocationPerimeterCreateOrConnectWithoutCreatorInput | LocationPerimeterCreateOrConnectWithoutCreatorInput[]
    upsert?: LocationPerimeterUpsertWithWhereUniqueWithoutCreatorInput | LocationPerimeterUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: LocationPerimeterCreateManyCreatorInputEnvelope
    set?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    disconnect?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    delete?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    connect?: LocationPerimeterWhereUniqueInput | LocationPerimeterWhereUniqueInput[]
    update?: LocationPerimeterUpdateWithWhereUniqueWithoutCreatorInput | LocationPerimeterUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: LocationPerimeterUpdateManyWithWhereWithoutCreatorInput | LocationPerimeterUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: LocationPerimeterScalarWhereInput | LocationPerimeterScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutShiftsInput = {
    create?: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShiftsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumShiftStatusFieldUpdateOperationsInput = {
    set?: $Enums.ShiftStatus
  }

  export type UserUpdateOneRequiredWithoutShiftsNestedInput = {
    create?: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShiftsInput
    upsert?: UserUpsertWithoutShiftsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShiftsInput, UserUpdateWithoutShiftsInput>, UserUncheckedUpdateWithoutShiftsInput>
  }

  export type UserCreateNestedOneWithoutCreatedPerimetersInput = {
    create?: XOR<UserCreateWithoutCreatedPerimetersInput, UserUncheckedCreateWithoutCreatedPerimetersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPerimetersInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutCreatedPerimetersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPerimetersInput, UserUncheckedCreateWithoutCreatedPerimetersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPerimetersInput
    upsert?: UserUpsertWithoutCreatedPerimetersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPerimetersInput, UserUpdateWithoutCreatedPerimetersInput>, UserUncheckedUpdateWithoutCreatedPerimetersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumShiftStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftStatus | EnumShiftStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftStatusFilter<$PrismaModel> | $Enums.ShiftStatus
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumShiftStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShiftStatus | EnumShiftStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShiftStatus[] | ListEnumShiftStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShiftStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShiftStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShiftStatusFilter<$PrismaModel>
    _max?: NestedEnumShiftStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ShiftRecordCreateWithoutUserInput = {
    id?: string
    clockInTime?: Date | string
    clockInLatitude: number
    clockInLongitude: number
    clockInNote?: string | null
    clockOutTime?: Date | string | null
    clockOutLatitude?: number | null
    clockOutLongitude?: number | null
    clockOutNote?: string | null
    durationMinutes?: number | null
    status?: $Enums.ShiftStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftRecordUncheckedCreateWithoutUserInput = {
    id?: string
    clockInTime?: Date | string
    clockInLatitude: number
    clockInLongitude: number
    clockInNote?: string | null
    clockOutTime?: Date | string | null
    clockOutLatitude?: number | null
    clockOutLongitude?: number | null
    clockOutNote?: string | null
    durationMinutes?: number | null
    status?: $Enums.ShiftStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftRecordCreateOrConnectWithoutUserInput = {
    where: ShiftRecordWhereUniqueInput
    create: XOR<ShiftRecordCreateWithoutUserInput, ShiftRecordUncheckedCreateWithoutUserInput>
  }

  export type ShiftRecordCreateManyUserInputEnvelope = {
    data: ShiftRecordCreateManyUserInput | ShiftRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LocationPerimeterCreateWithoutCreatorInput = {
    id?: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationPerimeterUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationPerimeterCreateOrConnectWithoutCreatorInput = {
    where: LocationPerimeterWhereUniqueInput
    create: XOR<LocationPerimeterCreateWithoutCreatorInput, LocationPerimeterUncheckedCreateWithoutCreatorInput>
  }

  export type LocationPerimeterCreateManyCreatorInputEnvelope = {
    data: LocationPerimeterCreateManyCreatorInput | LocationPerimeterCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ShiftRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: ShiftRecordWhereUniqueInput
    update: XOR<ShiftRecordUpdateWithoutUserInput, ShiftRecordUncheckedUpdateWithoutUserInput>
    create: XOR<ShiftRecordCreateWithoutUserInput, ShiftRecordUncheckedCreateWithoutUserInput>
  }

  export type ShiftRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: ShiftRecordWhereUniqueInput
    data: XOR<ShiftRecordUpdateWithoutUserInput, ShiftRecordUncheckedUpdateWithoutUserInput>
  }

  export type ShiftRecordUpdateManyWithWhereWithoutUserInput = {
    where: ShiftRecordScalarWhereInput
    data: XOR<ShiftRecordUpdateManyMutationInput, ShiftRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type ShiftRecordScalarWhereInput = {
    AND?: ShiftRecordScalarWhereInput | ShiftRecordScalarWhereInput[]
    OR?: ShiftRecordScalarWhereInput[]
    NOT?: ShiftRecordScalarWhereInput | ShiftRecordScalarWhereInput[]
    id?: StringFilter<"ShiftRecord"> | string
    userId?: StringFilter<"ShiftRecord"> | string
    clockInTime?: DateTimeFilter<"ShiftRecord"> | Date | string
    clockInLatitude?: FloatFilter<"ShiftRecord"> | number
    clockInLongitude?: FloatFilter<"ShiftRecord"> | number
    clockInNote?: StringNullableFilter<"ShiftRecord"> | string | null
    clockOutTime?: DateTimeNullableFilter<"ShiftRecord"> | Date | string | null
    clockOutLatitude?: FloatNullableFilter<"ShiftRecord"> | number | null
    clockOutLongitude?: FloatNullableFilter<"ShiftRecord"> | number | null
    clockOutNote?: StringNullableFilter<"ShiftRecord"> | string | null
    durationMinutes?: IntNullableFilter<"ShiftRecord"> | number | null
    status?: EnumShiftStatusFilter<"ShiftRecord"> | $Enums.ShiftStatus
    createdAt?: DateTimeFilter<"ShiftRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftRecord"> | Date | string
  }

  export type LocationPerimeterUpsertWithWhereUniqueWithoutCreatorInput = {
    where: LocationPerimeterWhereUniqueInput
    update: XOR<LocationPerimeterUpdateWithoutCreatorInput, LocationPerimeterUncheckedUpdateWithoutCreatorInput>
    create: XOR<LocationPerimeterCreateWithoutCreatorInput, LocationPerimeterUncheckedCreateWithoutCreatorInput>
  }

  export type LocationPerimeterUpdateWithWhereUniqueWithoutCreatorInput = {
    where: LocationPerimeterWhereUniqueInput
    data: XOR<LocationPerimeterUpdateWithoutCreatorInput, LocationPerimeterUncheckedUpdateWithoutCreatorInput>
  }

  export type LocationPerimeterUpdateManyWithWhereWithoutCreatorInput = {
    where: LocationPerimeterScalarWhereInput
    data: XOR<LocationPerimeterUpdateManyMutationInput, LocationPerimeterUncheckedUpdateManyWithoutCreatorInput>
  }

  export type LocationPerimeterScalarWhereInput = {
    AND?: LocationPerimeterScalarWhereInput | LocationPerimeterScalarWhereInput[]
    OR?: LocationPerimeterScalarWhereInput[]
    NOT?: LocationPerimeterScalarWhereInput | LocationPerimeterScalarWhereInput[]
    id?: StringFilter<"LocationPerimeter"> | string
    name?: StringFilter<"LocationPerimeter"> | string
    centerLatitude?: FloatFilter<"LocationPerimeter"> | number
    centerLongitude?: FloatFilter<"LocationPerimeter"> | number
    radiusKm?: FloatFilter<"LocationPerimeter"> | number
    createdBy?: StringFilter<"LocationPerimeter"> | string
    isActive?: BoolFilter<"LocationPerimeter"> | boolean
    createdAt?: DateTimeFilter<"LocationPerimeter"> | Date | string
    updatedAt?: DateTimeFilter<"LocationPerimeter"> | Date | string
  }

  export type UserCreateWithoutShiftsInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdPerimeters?: LocationPerimeterCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutShiftsInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdPerimeters?: LocationPerimeterUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutShiftsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
  }

  export type UserUpsertWithoutShiftsInput = {
    update: XOR<UserUpdateWithoutShiftsInput, UserUncheckedUpdateWithoutShiftsInput>
    create: XOR<UserCreateWithoutShiftsInput, UserUncheckedCreateWithoutShiftsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShiftsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShiftsInput, UserUncheckedUpdateWithoutShiftsInput>
  }

  export type UserUpdateWithoutShiftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdPerimeters?: LocationPerimeterUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutShiftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdPerimeters?: LocationPerimeterUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutCreatedPerimetersInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedPerimetersInput = {
    id?: string
    email: string
    name: string
    role?: $Enums.Role
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shifts?: ShiftRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedPerimetersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPerimetersInput, UserUncheckedCreateWithoutCreatedPerimetersInput>
  }

  export type UserUpsertWithoutCreatedPerimetersInput = {
    update: XOR<UserUpdateWithoutCreatedPerimetersInput, UserUncheckedUpdateWithoutCreatedPerimetersInput>
    create: XOR<UserCreateWithoutCreatedPerimetersInput, UserUncheckedCreateWithoutCreatedPerimetersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPerimetersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPerimetersInput, UserUncheckedUpdateWithoutCreatedPerimetersInput>
  }

  export type UserUpdateWithoutCreatedPerimetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPerimetersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shifts?: ShiftRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShiftRecordCreateManyUserInput = {
    id?: string
    clockInTime?: Date | string
    clockInLatitude: number
    clockInLongitude: number
    clockInNote?: string | null
    clockOutTime?: Date | string | null
    clockOutLatitude?: number | null
    clockOutLongitude?: number | null
    clockOutNote?: string | null
    durationMinutes?: number | null
    status?: $Enums.ShiftStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationPerimeterCreateManyCreatorInput = {
    id?: string
    name: string
    centerLatitude: number
    centerLongitude: number
    radiusKm?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clockInTime?: DateTimeFieldUpdateOperationsInput | Date | string
    clockInLatitude?: FloatFieldUpdateOperationsInput | number
    clockInLongitude?: FloatFieldUpdateOperationsInput | number
    clockInNote?: NullableStringFieldUpdateOperationsInput | string | null
    clockOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    clockOutNote?: NullableStringFieldUpdateOperationsInput | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumShiftStatusFieldUpdateOperationsInput | $Enums.ShiftStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationPerimeterUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationPerimeterUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationPerimeterUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    centerLatitude?: FloatFieldUpdateOperationsInput | number
    centerLongitude?: FloatFieldUpdateOperationsInput | number
    radiusKm?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftRecordDefaultArgs instead
     */
    export type ShiftRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationPerimeterDefaultArgs instead
     */
    export type LocationPerimeterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationPerimeterDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}